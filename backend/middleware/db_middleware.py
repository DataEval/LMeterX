"""
Author: Charm
Copyright (c) 2025, All Rights Reserved.
"""

from typing import Callable

from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware

from db.mysql import async_session_factory


class DBSessionMiddleware(BaseHTTPMiddleware):
    """
    Middleware to handle database session lifecycle for each request.
    It creates a new session from the session factory for each incoming request,
    attaches it to the request state, and ensures the session is closed after the
    request is processed. It also handles transaction commits and rollbacks.
    """

    async def dispatch(self, request: Request, call_next: Callable):
        """
        Manages the database session for a single HTTP request.

        This method obtains a new session from the `async_session_factory`,
        makes it available via `request.state.db`, and then passes control to
        the next middleware or request handler.

        If the request is processed successfully, the transaction is committed.
        If an exception occurs, the transaction is rolled back.
        Finally, the session is always closed.

        Args:
            request: The incoming HTTP request.
            call_next: The next callable in the middleware chain.

        Returns:
            The response generated by the application.
        """
        async with async_session_factory() as session:
            # Add the database session to the request state, making it accessible
            # in route handlers and other dependencies.
            request.state.db = session
            try:
                # Process the request and get the response.
                response = await call_next(request)
                # If the request was successful, commit the transaction.
                await session.commit()
                return response
            except Exception:
                # If any exception occurs during request processing, roll back the transaction.
                await session.rollback()
                # Re-raise the exception to be handled by FastAPI's exception handlers.
                raise
            finally:
                # Ensure the session is closed after the request is finished,
                # returning it to the connection pool.
                await session.close()
